#Real time data Analysis


import pandas as pd
import requests
from bs4 import BeautifulSoup
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Function to scrape data from a website
def scrape_data():
    # Example website URL
    url = "https://www.example.com/csp_data"

    # Make a GET request to the website
    response = requests.get(url)

    # Check if the request was successful
    if response.status_code == 200:
        # Parse HTML content
        soup = BeautifulSoup(response.content, "html.parser")

        # Extract data from HTML elements
        # Example: find table element and extract data into a DataFrame
        table = soup.find("table")
        df = pd.read_html(str(table))[0]

        return df
    else:
        print("Failed to fetch data from the website. Please check the URL.")
        return None

# Scrape data from the website
data = scrape_data()

# Proceed if data is scraped successfully
if data is not None:
    # Split the dataset into features (X) and target variable (y)
    X = data.drop("carbon_reduction", axis=1)  # Assuming "carbon_reduction" is the target variable
    y = data["carbon_reduction"]

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train the linear regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Make predictions on the testing set
    y_pred = model.predict(X_test)

    # Evaluate the model
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print("Mean Absolute Error:", mae)
    print("Mean Squared Error:", mse)
    print("R-squared Score:", r2)
